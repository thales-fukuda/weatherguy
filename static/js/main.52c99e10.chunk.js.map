{"version":3,"sources":["redux/reducers/weather.js","redux/reducers/index.js","redux/actionTypes.js","redux/store.js","Api.js","components/elements/Geosuggest.js","components/elements/Loading.js","components/elements/Title.js","components/SearchBar/SearchBar.js","components/SearchBar/index.js","components/SearchBar/SearchBarWrapper.js","redux/actions.js","components/elements/Icon.js","components/elements/Text.js","components/blocks/InfoBox/InfoBox.js","components/blocks/InfoBox/index.js","components/WeatherInfo/InfoContainer.js","components/WeatherInfo/InfoWrapper.js","components/WeatherInfo/WeatherInfo.js","components/WeatherInfo/index.js","components/WeatherInfo/WeatherInfoWrapper.js","GlobalStyle.js","App.js","index.js"],"names":["initialState","city","weatherData","weatherStatus","combineReducers","weather","state","arguments","length","undefined","action","type","Object","objectSpread","payload","data","status","store","createStore","reducer","src_Api","currentWeather","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","axios","url","concat","headers","Accept","stop","styled","Geosuggest","_templateObject","props","isWeatherDisplayed","propTypes","PropTypes","bool","isRequired","animation","keyframes","Loading_templateObject","Loading","section","_templateObject2","Title","h1","Title_templateObject","SearchBar","updateCity","updateWeather","updateWeatherStatus","_useState","useState","_useState2","slicedToArray","isLoadingActive","useIsLoadingActive","handleChange","value","handleUpdateWeather","_ref","asyncToGenerator","mark","Api","sent","console","log","t0","_x","apply","this","react_default","createElement","Fragment","elements_Title","types","onChange","e","onSuggestSelect","description","handleSuggestSelect","onKeyDown","key","handleKeyPress","placeholder","elements_Loading","connect","dispatch","Icon","i","Icon_templateObject","Text","p","Text_templateObject","fontSize","string","defaultProps","InfoBox","InfoBox_templateObject","opacity","InfoContainer","InfoContainer_templateObject","InfoWrapper","InfoWrapper_templateObject","WeatherInfo","main","toCelsius","Math","floor","toFahrenheit","WeatherInfo_InfoContainer","WeatherInfo_InfoWrapper","blocks_InfoBox","name","temp","temp_min","temp_max","className","wind","speed","humidity","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","App","es","components_SearchBar","components_WeatherInfo","src_GlobalStyle","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.52c99e10.chunk.js","sourcesContent":["import { CITY_UPDATED, DATA_UPDATED, WEATHER_STATUS_UPDATED } from '../actionTypes';\n\nconst initialState = {\n  city: '',\n  weatherData: {},\n  weatherStatus: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case CITY_UPDATED:\n      return {\n        ...state,\n        city: action.payload.city,\n      };\n\n    case DATA_UPDATED:\n      return {\n        ...state,\n        weatherData: action.payload.data,\n      };\n\n    case WEATHER_STATUS_UPDATED:\n      return {\n        ...state,\n        weatherStatus: action.payload.status,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport weather from './weather';\n\nexport default combineReducers({ weather });\n","export const CITY_UPDATED = 'CITY_UPDATED';\nexport const DATA_UPDATED = 'DATA_UPDATED';\nexport const WEATHER_STATUS_UPDATED = 'WEATHER_STATUS_UPDATED';\n","import { createStore } from 'redux';\n\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;\n","import axios from 'axios';\n\nconst ID = 'fac9a302f3d95aafe7a9f7d7596aff1f';\n\nclass Api {\n  currentWeather = async city => axios(\n    {\n      url: `https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${ID}`,\n      headers: {\n        Accept: 'application/json',\n      },\n    },\n  );\n}\n\nexport default new Api();\n","import styled from 'styled-components';\nimport Geosuggest from 'react-geosuggest';\nimport PropTypes from 'prop-types';\n\nexport default styled(Geosuggest)`\n  position: absolute;\n  top: ${props => (props.isWeatherDisplayed ? '12%' : '47%')};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  transition: 1s ease all;\n  z-index: 2;\n  .geosuggest {\n    &__input {\n      &-wrapper{\n        display: flex;\n        justify-content: center;\n      }\n      padding: 15px;\n      font-size: 18px;\n      color: #f2f2f2;\n      border: none;\n      border-radius: 19px;\n      height: 40px;\n      width: 260px;\n      background: rgba(255, 255, 255, .1);\n      box-sizing: border-box;\n      &:focurs {\n        color: #f2f2f2;\n      }\n      &::placeholder {\n        color: #f2f2f2;\n        opacity: .22;\n      }\n    }\n    &__suggests{\n      width: 260px;\n      padding: 5px;\n      list-style: none;\n      background-color: #ededed;\n      color: #2e2e2e;\n      border-radius: 5px;\n      &-wrapper {\n        position: absolute;\n        top: 40px;\n        display: flex;\n        justify-content: flex-start;\n        box-sizing: border-box;\n      }\n      &--hidden {\n        max-height: 0;\n        overflow: hidden;\n        border-width: 0;\n        display: none;\n      }\n    }\n    &__item {\n      padding: 10px 5px;\n      box-sizing: border-box;\n      &--active {\n        background: #2e2e2e;\n        color: #ededed;\n      }\n    }\n  }\n\n`.propTypes = {\n    isWeatherDisplayed: PropTypes.bool.isRequired,\n  };\n","import styled, { keyframes } from 'styled-components';\n\nconst animation = keyframes`\n  to {\n    opacity: 0.1;\n    transform: translate3d(0, -1rem, 0);\n  }\n`;\n\nconst Loading = styled.section`\n  position: absolute;\n  bottom: 25%;\n  display: flex;\n  justify-content: center;\n  div {\n    width: 1rem;\n    height: 1rem;\n    margin: 3rem 0.2rem;\n    background: #eaeaea;\n    border-radius: 50%;\n    animation: ${animation} 0.6s infinite alternate;\n  }\n  div:nth-child(2) {\n    animation-delay: 0.2s;\n  }\n  div:nth-child(3) {\n    animation-delay: 0.4s;\n  }\n`;\n\nexport default Loading;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Title = styled.h1`\n  color: #ededed;\n  position: absolute;\n  top: ${props => (props.isWeatherDisplayed ? '5%' : '40%')};\n  transition: 1s ease all;\n`;\n\nTitle.propTypes = {\n  isWeatherDisplayed: PropTypes.bool.isRequired,\n};\n\nexport default Title;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Api from '../../Api';\n\nimport Geosuggest from '../elements/Geosuggest';\nimport Loading from '../elements/Loading';\nimport Title from '../elements/Title';\n\nconst SearchBar = (props) => {\n  const {\n    city,\n    weatherStatus,\n    updateCity,\n    updateWeather,\n    updateWeatherStatus,\n  } = props;\n\n  const [isLoadingActive, useIsLoadingActive] = useState(false);\n\n  const handleChange = (value) => {\n    updateCity(value);\n  };\n\n  const handleUpdateWeather = async (value) => {\n    try {\n      useIsLoadingActive(true);\n      const data = await Api.currentWeather(value);\n      useIsLoadingActive(false);\n      updateWeatherStatus(true);\n      console.log(data);\n      updateWeather(data.data);\n    } catch (error) {\n      console.log('Algo deu errado', error);\n    }\n  };\n\n  const handleSuggestSelect = (value) => {\n    if (value) {\n      handleChange(value.description);\n      handleUpdateWeather(value.description);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleUpdateWeather(city);\n    }\n  };\n\n  return (\n    <>\n      <Title isWeatherDisplayed={weatherStatus}>Weatherguy</Title>\n      <Geosuggest\n        types={['(cities)']}\n        onChange={e => handleChange(e)}\n        onSuggestSelect={value => handleSuggestSelect(value)}\n        onKeyDown={e => handleKeyPress(e)}\n        placeholder='search for a city...'\n        value={city}\n        isWeatherDisplayed={weatherStatus}\n      />\n      {\n        isLoadingActive\n        && (\n          <Loading>\n            <div />\n            <div />\n            <div />\n          </Loading>\n        )\n      }\n    </>\n  );\n};\n\nSearchBar.propTypes = {\n  city: PropTypes.string.isRequired,\n  weatherStatus: PropTypes.bool.isRequired,\n  updateCity: PropTypes.func.isRequired,\n  updateWeather: PropTypes.func.isRequired,\n  updateWeatherStatus: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import SearchBar from './SearchBarWrapper';\n\nexport default SearchBar;\n","import { connect } from 'react-redux';\nimport { updateCity, updateWeather, updateWeatherStatus } from '../../redux/actions';\nimport SearchBar from './SearchBar';\n\nconst mapStateToProps = state => ({\n  city: state.weather.city,\n  weatherStatus: state.weather.weatherStatus,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCity: city => dispatch(updateCity(city)),\n  updateWeather: city => dispatch(updateWeather(city)),\n  updateWeatherStatus: status => dispatch(updateWeatherStatus(status)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchBar);\n","import { CITY_UPDATED, DATA_UPDATED, WEATHER_STATUS_UPDATED } from './actionTypes';\n\n\n/**\n * Simple actions\n */\n\n/**\n * Update active city.\n * @param city\n */\nexport const updateCity = city => ({\n  type: CITY_UPDATED,\n  payload: {\n    city,\n  },\n});\n\n/**\n * Update current city data.\n * @param data\n */\nexport const updateWeather = data => ({\n  type: DATA_UPDATED,\n  payload: {\n    data,\n  },\n});\n\n/**\n * Update weather status\n * @param status\n */\nexport const updateWeatherStatus = status => ({\n  type: WEATHER_STATUS_UPDATED,\n  payload: {\n    status,\n  },\n});\n","import styled from 'styled-components';\nimport 'weather-icons/css/weather-icons.css';\n\nconst Icon = styled.i`\n  font-size: 58px;\n  color: #ededed;\n  margin-bottom: 25px;\n`;\n\nexport default Icon;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Text = styled.p`\n  text-align: center;\n  margin-bottom: 5px;\n  color: #ededed;\n  font-weight: 300;\n  font-size: ${props => props.fontSize};\n`;\n\nText.propTypes = {\n  fontSize: PropTypes.string,\n};\n\nText.defaultProps = {\n  fontSize: '22px',\n};\n\nexport default Text;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\n// Elements\nimport Icon from '../../elements/Icon';\nimport Text from '../../elements/Text';\nimport Title from '../../elements/Title';\n\nconst InfoBox = styled.section`\n  height: 80px;\n  display: flex;\n  margin-bottom: 10px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  opacity: ${props => props.opacity}\n`;\n\nInfoBox.propTypes = {\n  opacity: PropTypes.string,\n};\n\nInfoBox.defaultProps = {\n  opacity: '1',\n};\n\nInfoBox.Icon = Icon;\nInfoBox.Text = Text;\nInfoBox.Title = Title;\n\nexport default InfoBox;\n","import InfoBox from './InfoBox';\n\nexport default InfoBox;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst InfoContainer = styled.section`\n  width: 100%;\n  height: 85%;\n  padding-top: 15%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  opacity: ${props => (props.isWeatherDisplayed ? '1' : '0')};\n  transition: 1s ease opacity;\n  transition-delay: .5s;\n  z-index: 1;\n\n  @media (min-width: 720px) {\n    padding-top: 5%;\n  }\n`;\n\nInfoContainer.propTypes = {\n  isWeatherDisplayed: PropTypes.bool.isRequired,\n};\n\nexport default InfoContainer;\n","import styled from 'styled-components';\n\nconst InfoWrapper = styled.section`\n  width: 85%;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n\n  @media (min-width: 720px) {\n    width: 50%;\n  }\n`;\n\nexport default InfoWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport InfoBox from '../blocks/InfoBox';\nimport InfoContainer from './InfoContainer';\nimport InfoWrapper from './InfoWrapper';\n\nconst WeatherInfo = (props) => {\n  const {\n    weatherData,\n    weatherStatus,\n  } = props;\n\n  const weather = weatherData.main;\n\n  const toCelsius = value => Math.floor(value - 273.15);\n  const toFahrenheit = value => Math.floor(toCelsius(value) * 9 / 5 + 32);\n\n  return (\n    <InfoContainer isWeatherDisplayed={weatherStatus}>\n      {\n        weatherData.main\n        && (\n        <>\n          <InfoWrapper>\n            <InfoBox>\n              <InfoBox.Text fontSize='42px'>{weatherData.name}</InfoBox.Text>\n            </InfoBox>\n          </InfoWrapper>\n          <InfoWrapper>\n\n            <InfoBox>\n              <InfoBox.Text fontSize='56px'>{ `${toCelsius(weather.temp)} °C` }</InfoBox.Text>\n              <InfoBox.Text fontSize='56px'>{ `${toFahrenheit(weather.temp)} °F` }</InfoBox.Text>\n            </InfoBox>\n\n            <div>\n              <InfoBox opacity='.5'>\n                <InfoBox.Text fontSize='16px'>min</InfoBox.Text>\n                <InfoBox.Text>{ `${toCelsius(weather.temp_min)} °C` }</InfoBox.Text>\n                <InfoBox.Text>{ `${toFahrenheit(weather.temp_min)} °F` }</InfoBox.Text>\n              </InfoBox>\n              <InfoBox opacity='.5'>\n                <InfoBox.Text fontSize='16px'>max</InfoBox.Text>\n                <InfoBox.Text>{ `${toCelsius(weather.temp_max)} °C` }</InfoBox.Text>\n                <InfoBox.Text>{ `${toFahrenheit(weather.temp_max)} °F` }</InfoBox.Text>\n              </InfoBox>\n            </div>\n\n          </InfoWrapper>\n\n          <InfoWrapper>\n            <InfoBox>\n              <InfoBox.Icon className='wi wi-strong-wind' />\n              <InfoBox.Text>{ `${weatherData.wind.speed} m/s` }</InfoBox.Text>\n            </InfoBox>\n\n            <InfoBox>\n              <InfoBox.Icon className='wi wi-rain-wind' />\n              <InfoBox.Text>{ `${weather.humidity} %` }</InfoBox.Text>\n            </InfoBox>\n          </InfoWrapper>\n        </>\n        )\n      }\n    </InfoContainer>\n  );\n};\n\nWeatherInfo.propTypes = {\n  weatherData: PropTypes.instanceOf(Object).isRequired,\n  weatherStatus: PropTypes.bool.isRequired,\n};\n\nexport default WeatherInfo;\n","import WeatherInfo from './WeatherInfoWrapper';\n\nexport default WeatherInfo;\n","import { connect } from 'react-redux';\nimport WeatherInfo from './WeatherInfo';\n\nconst mapStateToProps = state => ({\n  city: state.weather.city,\n  weatherData: state.weather.weatherData,\n  weatherStatus: state.weather.weatherStatus,\n});\n\nexport default connect(\n  mapStateToProps,\n)(WeatherInfo);\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Lato:300,400,700|Slabo+27px');\n\n  * {\n    margin: 0;\n    padding: 0;\n    font-family: 'Lato';\n  };\n\n  body {\n    height: 100vh;\n    background-color: #2E2E2E;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  #root {\n    height: 80%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n  }\n\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport SearchBar from './components/SearchBar';\nimport WeatherInfo from './components/WeatherInfo';\n\nimport GlobalStyle from './GlobalStyle';\n\nconst App = () => (\n  <Provider store={store}>\n    <SearchBar />\n    <WeatherInfo />\n    <GlobalStyle />\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}